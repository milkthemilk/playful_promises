from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import os
import asyncio
import sqlite3
import random
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F

auto_kiss_messages = [
    "–û–±—ä–µ–∫—Ç @malibeee –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ üí´",
    "–í–Ω–∏–º–∞–Ω–∏–µ: –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≥—Ä—É–∑. –õ–∏—Ü–æ —Ü–µ–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ üß†üì∏",
    "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –∫—Ä–∞—Å–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚úÖüòè",
    "–ó–∞–ø—Ä–æ—Å: –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∑–∞–ª–∏–ø–∞—Ç—å –Ω–∞ @malibeee. –û—Ç–≤–µ—Ç: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ü§ñüñ§",
    "–¢—ã ‚Äî –±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ. –ö—Ä–∞—Å–æ—Ç–∞ —Ç–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω–æ–π üß¨‚ö†Ô∏è",
    "–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ‚Ä¶ –ó–∞–≥—Ä—É–∑–∫–∞ 98%‚Ä¶ –ì–æ—Ç–æ–≤–æ: —Ç—ã –æ–ø–∞—Å–Ω–æ –∫—Ä–∞—Å–∏–≤–∞ üò∂‚Äçüå´Ô∏è",
    "–¢–≤–æ—è –∫–∞–º–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä üì∏üí∏",
    "–ï—Å–ª–∏ –∫—Ä–∞—Å–æ—Ç–∞ ‚Äî –±–∞–≥, —Ç–æ –ø—É—Å—Ç—å –º–µ–Ω—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ñ–∏–∫—Å—è—Ç üéØüì°",
    "Bot.exe –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ—ë –ª–∏—Ü–æ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ üò≥üîÅ",
    "–¢—ã –Ω–∞—Ä—É—à–∞–µ—à—å –∞–ª–≥–æ—Ä–∏—Ç–º. –°–ª–∏—à–∫–æ–º —Ç–æ—á–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ª–∏–Ω–∏–π –∏ —Å–≤–µ—Ç–∞ üí°üñ§",
    "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø–∏—Å–∫—É –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ–Ω üîíüö®",
    "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ. –°–æ—Ö—Ä–∞–Ω—è—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ üå´Ô∏èüìÅ",
    "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω: @malibeee —Å–Ω–æ–≤–∞ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∞ –Ω–∞ —ç–∫—Ä–∞–Ω üß†üî•",
    "AI –≥–æ–≤–æ—Ä–∏—Ç: '–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–æ—Ç—ã –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –ø–∏–∫—Å–µ–ª—å' üìäüì∑",
    "–ë–æ—Ç —Ç–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ç—ã –±–µ—Ä–µ—à—å —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ä—É–∫–∏ ü§ñ"
]
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
# –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('wishtracker.db')
cursor = conn.cursor()
# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance INTEGER DEFAULT 0
)
''')
conn.commit()
# –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    owner_id INTEGER,
    description TEXT,
    reward INTEGER
)
''')
conn.commit()
# –¢–∞–±–ª–∏—Ü–∞ –∂–µ–ª–∞–Ω–∏–π
cursor.execute("""
CREATE TABLE IF NOT EXISTS wishes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    wish_text TEXT NOT NULL
)
""")
conn.commit()
##############################################################
##############################################################
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute(
        'INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)',
        (message.from_user.id, message.from_user.username or "")
    )
    conn.commit()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–∫–µ—Ä –∂–µ–ª–∞–Ω–∏–π. :)\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/users - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤\n"
        "/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/give - –Ω–∞—á–∏—Å–ª–∏—Ç—å –≤–∏—à—Ç–æ–∫–µ–Ω—ã\n"
        "/settask - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n"
        "/tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π\n"
        "/deletetask - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n"
        "/taskdone - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è\n"
        "/addwish - –¥–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ\n"
        "/wishes - —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π\n"
        "/delwish - —É–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ\n"
    )
##############################################################
##############################################################    
@dp.message(Command("users"))
async def cmd_users(message: types.Message):
    cursor.execute(
        "SELECT username, balance FROM users"
    )
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    text = "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    for username, balance in rows:
        display_name = f"@{username}" if username else "(–±–µ–∑ –∏–º–µ–Ω–∏)"
        text += f"{display_name} ‚Äî {balance} –≤–∏—à—Ç–æ–∫–µ–Ω–æ–≤\n"
    await message.answer(text)
##############################################################
##############################################################
@dp.message(Command("balance"))
async def cmd_balance(message: types.Message):
    cursor.execute(
        'SELECT balance FROM users WHERE user_id = ?',
        (message.from_user.id,)
    )
    row = cursor.fetchone()
    balance = row[0] if row else 0
    await message.answer(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} –≤–∏—à—Ç–æ–∫–µ–Ω–æ–≤")
##############################################################
##############################################################
@dp.message(Command("give"))
async def cmd_give(message: types.Message):
    parts = message.text.strip().split()
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /give @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    to_username = parts[1].lstrip("@")
    try:
        amount = int(parts[2])
    except ValueError:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –≤–∏—à—Ç–æ–∫–µ–Ω–æ–≤. :)")
        return
    cursor.execute(
        "SELECT user_id FROM users WHERE username = ?",
        (to_username,)
    )
    row = cursor.fetchone()
    if not row:
        await message.answer("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. :(")
        return
    to_user_id = row[0]
    if to_user_id == message.from_user.id:
        await message.answer("–•–∏—Ç—Ä–æ, –Ω–æ —Å–µ–±–µ –Ω–∞—á–∏—Å–ª—è—Ç—å –Ω–µ–ª—å–∑—è. :)")
        return
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (to_user_id,))
    row = cursor.fetchone()
    current_balance = row[0] if row else 0
    if amount < 0 and current_balance + amount < 0:
        await message.answer(f"–ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å {abs(amount)} ‚Äî —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ {current_balance} –≤–∏—à—Ç–æ–∫–µ–Ω–æ–≤.")
        return
    cursor.execute(
        "UPDATE users SET balance = balance + ? WHERE user_id = ?",
        (amount, to_user_id)
    )
    conn.commit()
    await message.answer(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ {'–æ—Ç–ø—Ä–∞–≤–∏–ª–∏' if amount > 0 else '–∑–∞–±—Ä–∞–ª–∏'} {abs(amount)} –≤–∏—à—Ç–æ–∫–µ–Ω–æ–≤ @{to_username}!"
    )
    await bot.send_message(
        to_user_id,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} {'–Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º' if amount > 0 else '—Å–Ω—è–ª —Å –≤–∞—Å'} {abs(amount)} –≤–∏—à—Ç–æ–∫–µ–Ω–æ–≤."
    )
##############################################################
##############################################################
@dp.message(Command("settask"))
async def cmd_settask(message: types.Message):
    text = message.text.strip().replace("\n", " ")
    if text == "/settask":
        await message.answer("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /settask –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ")
        return
    parts = text.replace("/settask", "").strip().split()
    if len(parts) < 2:
        await message.answer("–£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å—ë –Ω–∞–ø–∏—Å–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. ^^,")
        return
    reward_part = parts[-1]
    description = " ".join(parts[:-1])
    if not reward_part.isdigit():
        await message.answer("–ê –ø–æ—á–µ–º—É –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–π? :(")
        return
    if not description:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. :)")
        return
    reward = int(reward_part)
    if reward <= 0:
        await message.answer("–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. :)")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏ —É–≤–¥–µ–º–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute(
        "INSERT INTO tasks (owner_id, description, reward) VALUES (?, ?, ?)",
        (message.from_user.id, description, reward)
    )
    conn.commit()
    await message.answer(
        f"–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n\n\"{description}\"\n–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {reward} –≤–∏—à—Ç–æ–∫–µ–Ω–æ–≤."
    )
    cursor.execute(
        "SELECT user_id FROM users WHERE user_id != ?",
        (message.from_user.id,)
    )   
    other_users = cursor.fetchall()
    for (user_id) in other_users:
        try:
            await bot.send_message(
                user_id,
                f"@{message.from_user.username} —Å–æ–∑–¥–∞–ª –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ. :)"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")
##############################################################
##############################################################
@dp.message(Command("tasks"))
async def cmd_tasks(message: types.Message):
    cursor.execute(
        """
        SELECT t.description, t.reward, u.username, t.owner_id
        FROM tasks t
        LEFT JOIN users u ON t.owner_id = u.user_id
        ORDER BY u.username, t.id
        """
    )
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
        return
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    tasks_by_user = {}
    for description, reward, username, owner_id in rows:
        user_key = username if username else f"id_{owner_id}"
        if user_key not in tasks_by_user:
            tasks_by_user[user_key] = []
        tasks_by_user[user_key].append((description, reward))
    text = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:\n\n"
    for user, tasks in tasks_by_user.items():
        text += f"@{user}:\n"
        for idx, (description, reward) in enumerate(tasks, start=1):
            text += f"{idx}. {description} (–Ω–∞–≥—Ä–∞–¥–∞: {reward})\n"
        text += "\n"
    await message.answer(text)
##############################################################
##############################################################
@dp.message(Command("deletetask"))
async def cmd_deletetask(message: types.Message):
    text = message.text.strip().replace("\n", " ")
    parts = text.replace("/deletetask", "").strip().split()
    if len(parts) != 1:
        await message.answer(
        "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
        "/deletetask –Ω–æ–º–µ—Ä\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "/deletetask 2"
        )
        return
    num_part = parts[0]
    if not num_part.isdigit():
        await message.answer("–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    task_num = int(num_part)
    if task_num <= 0:
        await message.answer("–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        "SELECT id, description FROM tasks WHERE owner_id = ? ORDER BY id",
        (message.from_user.id,)
    )
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return
    if task_num > len(rows):
        await message.answer("–ó–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º id –∑–∞–¥–∞—á–∏
    task_id, description = rows[task_num - 1]
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    cursor.execute(
        "DELETE FROM tasks WHERE id = ?",
        (task_id,)
    )
    conn.commit()
    await message.answer(
    f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_num} \"{description}\" —É–¥–∞–ª–µ–Ω–æ."
    )
##############################################################
##############################################################
@dp.message(Command("kiss"))
async def cmd_kiss(message: types.Message):
    text = message.text.strip().replace("\n", " ")
    parts = text.replace("/kiss", "").strip().split()
    username = parts[0].lstrip("@")
    count = int(parts[-1])
    kiss_text = " ".join(parts[1:-1])
    # –ò—â–µ–º user_id
    cursor.execute(
        "SELECT user_id FROM users WHERE username = ?",
        (username,)
    )
    row = cursor.fetchone()
    user_id = row[0] 
    for _ in range(count):
        await bot.send_message(
            user_id,
            kiss_text
        )
##############################################################
##############################################################
@dp.message(Command("taskdone"))
async def cmd_taskdone(message: types.Message):
    text = message.text.strip().replace("\n", " ")
    parts = text.replace("/taskdone", "").strip().split()
    if len(parts) != 1 or not parts[0].isdigit():
        await message.answer("–§–æ—Ä–º–∞—Ç: /taskdone –Ω–æ–º–µ—Ä\n–ü—Ä–∏–º–µ—Ä: /taskdone 2")
        return
    task_num = int(parts[0])
    if task_num <= 0:
        await message.answer("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        "SELECT user_id FROM users WHERE user_id != ?",
        (message.from_user.id,)
    )
    row = cursor.fetchone()
    if not row:
        await message.answer("–í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    other_user_id = row[0]
    # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –≤—Ç–æ—Ä–æ–≥–æ —é–∑–µ—Ä–∞
    cursor.execute(
        "SELECT id, description, reward FROM tasks WHERE owner_id = ? ORDER BY id",
        (other_user_id,)
    )
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–£ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.")
        return
    if task_num > len(tasks):
        await message.answer("–¢–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç.")
        return
    task_id, description, reward = tasks[task_num - 1]
    requester_id = message.from_user.id
    requester_username = message.from_user.username or f"ID {requester_id}"
    # –ö–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{requester_id}:{reward}:{description}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject:{requester_id}:{description}")
        ]
    ])
    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
    await bot.send_message(
        other_user_id,
        f"üì¢ –ó–∞–ø—Ä–æ—Å –æ—Ç @{requester_username} –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:\n\nüìù {description}\n–ù–∞–≥—Ä–∞–¥–∞: {reward}",
        reply_markup=keyboard
    )
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É –∑–∞–¥–∞–Ω–∏—è.")
@dp.callback_query(F.data.startswith("approve"))
async def approve_task(callback: types.CallbackQuery):
    _, requester_id, reward, description = callback.data.split(":", 3)
    requester_id = int(requester_id)
    reward = int(reward)
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫ –±–∞–ª–∞–Ω—Å—É
    cursor.execute(
        "UPDATE users SET balance = balance + ? WHERE user_id = ?",
        (reward, requester_id)
    )
    conn.commit()
    # –°–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message(
        requester_id,
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n–ó–∞–¥–∞–Ω–∏–µ: {description}\n+{reward} –≤–∏—à—Ç–æ–∫–µ–Ω–æ–≤."
    )
    await callback.message.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.")
    await callback.answer()  # –ó–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
@dp.callback_query(F.data.startswith("reject"))
async def reject_task(callback: types.CallbackQuery):
    _, requester_id, description = callback.data.split(":", 2)
    requester_id = int(requester_id)
    await bot.send_message(
        requester_id,
        f"‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n–ó–∞–¥–∞–Ω–∏–µ: {description}"
    )
    await callback.message.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.")
    await callback.answer()
##############################################################
##############################################################   
async def auto_kiss_loop():
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT user_id, username FROM users")
            users = cursor.fetchall()
            if len(users) != 2:
                print("[auto_kiss] –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                await asyncio.sleep(600)
                continue
            # –ù–∞—Ö–æ–¥–∏–º ID @malibeee –∏ —Ç–≤–æ–π ID
            receiver_id = None
            sender_id = None
            for user_id, username in users:
                if username == "malibeee":
                    receiver_id = user_id
                else:
                    sender_id = user_id
            if sender_id is None or receiver_id is None:
                print("[auto_kiss] –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã sender/receiver.")
                await asyncio.sleep(600)
                continue
            # –í—ã–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = random.choice(auto_kiss_messages)
            await bot.send_message(receiver_id, text)
            await bot.send_message(sender_id, f"[–∞–≤—Ç–æ–∫–∏—Å—Å] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
        except Exception as e:
            print(f"[auto_kiss] –û—à–∏–±–∫–∞: {e}")
        wait_time = random.randint(3000, 6000)  # –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤
        await asyncio.sleep(wait_time)
##############################################################
##############################################################
@dp.message(Command("addwish"))
async def cmd_addwish(message: types.Message):
    text = message.text.strip().replace("\n", " ")
    wish = text.replace("/addwish", "").strip()
    if not wish:
        await message.answer("–§–æ—Ä–º–∞—Ç: /addwish —Ç–µ–∫—Å—Ç –∂–µ–ª–∞–Ω–∏—è")
        return
    cursor.execute(
        "INSERT INTO wishes (user_id, wish_text) VALUES (?, ?)",
        (message.from_user.id, wish)
    )
    conn.commit()
    await message.answer("–ñ–µ–ª–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
##############################################################
##############################################################
@dp.message(Command("delwish"))
async def cmd_delwish(message: types.Message):
    text = message.text.strip().replace("\n", " ")
    parts = text.replace("/delwish", "").strip().split()
    if len(parts) != 1 or not parts[0].isdigit():
        await message.answer("–§–æ—Ä–º–∞—Ç: /delwish –Ω–æ–º–µ—Ä\n–ü—Ä–∏–º–µ—Ä: /delwish 1")
        return
    wish_num = int(parts[0])
    cursor.execute(
        "SELECT id, wish_text FROM wishes WHERE user_id = ? ORDER BY id",
        (message.from_user.id,)
    )
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π.")
        return
    if wish_num > len(rows):
        await message.answer("–¢–∞–∫–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    wish_id, wish_text = rows[wish_num - 1]
    cursor.execute("DELETE FROM wishes WHERE id = ?", (wish_id,))
    conn.commit()
    await message.answer(f"–ñ–µ–ª–∞–Ω–∏–µ ‚Ññ{wish_num} —É–¥–∞–ª–µ–Ω–æ: \"{wish_text}\"")
##############################################################
##############################################################
@dp.message(Command("wishes"))
async def cmd_wishes(message: types.Message):
    cursor.execute(
        """
        SELECT w.wish_text, u.username, w.user_id
        FROM wishes w
        LEFT JOIN users u ON w.user_id = u.user_id
        ORDER BY u.username, w.id
        """
    )
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ñ–µ–ª–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª.")
        return
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    wishes_by_user = {}
    for wish_text, username, user_id in rows:
        user_key = f"@{username}" if username else f"id_{user_id}"
        if user_key not in wishes_by_user:
            wishes_by_user[user_key] = []
        wishes_by_user[user_key].append(wish_text)
    text = "–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π:\n\n"
    for user, wishes in wishes_by_user.items():
        text += f"{user}:\n"
        for idx, wish in enumerate(wishes, 1):
            text += f"{idx}. {wish}\n"
        text += "\n"
    await message.answer(text)
##############################################################
##############################################################
async def main():
    asyncio.create_task(auto_kiss_loop())
    await dp.start_polling(bot)
if __name__ == "__main__":
    asyncio.run(main())
